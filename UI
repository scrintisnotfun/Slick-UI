--[[
    WindUI v2.1 - Complete Refactor
    Description: A modern, lightweight, and efficient UI library for Roblox.
    Inspired by the clean aesthetics of OwlHook for a better user experience.
    Features: Window, Tabs, Label, Button, Toggle, Slider, Dropdown, and Premium/Locked features.
]]

local WindUI = {}
WindUI.__index = WindUI

-- Roblox Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Configuration
local Config = {
    Colors = {
        Accent = Color3.fromRGB(0, 120, 215),
        Premium = Color3.fromRGB(255, 200, 0),
        Main = Color3.fromRGB(25, 25, 25),
        Content = Color3.fromRGB(30, 30, 30),
        Header = Color3.fromRGB(35, 35, 35),
        Element = Color3.fromRGB(40, 40, 40),
        Hover = Color3.fromRGB(45, 45, 45),
        Disabled = Color3.fromRGB(60, 60, 60),
        Stroke = Color3.fromRGB(80, 80, 80),
        Text = Color3.fromRGB(220, 220, 220),
        TextDisabled = Color3.fromRGB(150, 150, 150),
    },
    Fonts = {
        Bold = Enum.Font.GothamBold,
        Medium = Enum.Font.GothamMedium,
        Regular = Enum.Font.Gotham,
    }
}

-- Icon mapping
local iconMap = {
	["star"] = "⭐", ["lightbulb"] = "💡", ["home"] = "🏠", ["settings"] = "⚙️",
	["user"] = "👤", ["search"] = "🔍", ["bell"] = "🔔", ["heart"] = "❤️",
	["shield"] = "🛡️", ["crown"] = "👑", ["fire"] = "🔥", ["rocket"] = "🚀",
	["trophy"] = "🏆", ["gift"] = "🎁", ["music"] = "🎵", ["camera"] = "📷",
	["book"] = "📚", ["globe"] = "🌐", ["lock"] = "🔒", ["key"] = "🔑"
}

local function getIcon(icon)
	if not icon then return nil end
	return iconMap[icon] or (icon:match("[%z\1-\127\194-\244][\128-\191]*") and #icon <= 4 and icon or nil)
end

-- Anti-detection: Generates random names for UI elements
local function randomName()
	return ("%s"):format(math.random(1e9, 1e10))
end

-- Premium/Locked Feature Popup
local function createPremiumPopup(screenGui)
	local backdrop = Instance.new("Frame")
	backdrop.Name = "PremiumPopupBackdrop"
	backdrop.Size = UDim2.new(1, 0, 1, 0)
	backdrop.BackgroundColor3 = Color3.new()
	backdrop.BackgroundTransparency = 1
	backdrop.ZIndex = 1000
	backdrop.Parent = screenGui

	local popup = Instance.new("Frame")
	popup.Name = "PremiumPopup"
	popup.Size = UDim2.fromOffset(350, 200)
	popup.Position = UDim2.fromScale(0.5, 0.5)
	popup.AnchorPoint = Vector2.new(0.5, 0.5)
	popup.BackgroundColor3 = Config.Colors.Content
	popup.ZIndex = 1001
	popup.Parent = backdrop
	Instance.new("UICorner", popup).CornerRadius = UDim.new(0, 8)
	Instance.new("UIStroke", popup).Color = Config.Colors.Stroke

	local title = Instance.new("TextLabel", popup)
	title.Size = UDim2.new(1, 0, 0, 50)
	title.BackgroundTransparency = 1
	title.Text = "Premium Feature"
	title.TextColor3 = Config.Colors.Premium
	title.TextSize = 22
	title.Font = Config.Fonts.Bold

	local lockIcon = Instance.new("TextLabel", popup)
	lockIcon.Size = UDim2.fromOffset(40, 40)
	lockIcon.Position = UDim2.fromScale(0.5, 0.4)
	lockIcon.AnchorPoint = Vector2.new(0.5, 0.5)
	lockIcon.BackgroundTransparency = 1
	lockIcon.Text = "🔒"
	lockIcon.TextSize = 36

	local desc = Instance.new("TextLabel", popup)
	desc.Size = UDim2.new(1, -40, 0, 30)
	desc.Position = UDim2.new(0.5, 0, 0, 100)
	desc.AnchorPoint = Vector2.new(0.5, 0)
	desc.BackgroundTransparency = 1
	desc.Text = "Join our Discord to get access!"
	desc.TextColor3 = Config.Colors.Text
	desc.TextSize = 14
	desc.Font = Config.Fonts.Regular

	local createButton = function(text, color, position, callback)
		local btn = Instance.new("TextButton", popup)
		btn.Size = UDim2.new(0.5, -15, 0, 38)
		btn.Position = position
		btn.BackgroundColor3 = color
		btn.Text = text
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.TextSize = 14
		btn.Font = Config.Fonts.Bold
		Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
		btn.MouseButton1Click:Connect(callback)
		return btn
	end

	local discordBtn = createButton("Copy Discord", Color3.fromRGB(88, 101, 242), UDim2.new(0, 10, 1, -48), function()
		setclipboard("https://discord.gg/cE6tjPRzjx") -- Placeholder
		discordBtn.Text = "Copied!"
		task.delay(1.5, function() if discordBtn and discordBtn.Parent then discordBtn.Text = "Copy Discord" end end)
	end)

	local closePopup = function()
		TweenService:Create(backdrop, TweenInfo.new(0.2), { BackgroundTransparency = 1 }):Play()
		task.delay(0.2, function() backdrop:Destroy() end)
	end
	
	createButton("Close", Config.Colors.Stroke, UDim2.new(0.5, 5, 1, -48), closePopup)

	TweenService:Create(backdrop, TweenInfo.new(0.3), { BackgroundTransparency = 0.5 }):Play()
	return backdrop
end

function WindUI:CreateWindow(options)
	options = options or {}
	local title = options.Title or "Wind UI"
	local size = options.Size or {580, 450}
	if typeof(options.Size) == "UDim2" then
		size = {options.Size.X.Offset, options.Size.Y.Offset}
	end

	local self = setmetatable({
		ScreenGui = Instance.new("ScreenGui", Players.LocalPlayer:WaitForChild("PlayerGui")),
		Tabs = {},
		CurrentTab = nil
	}, WindUI)
	
	self.ScreenGui.Name = randomName()
	self.ScreenGui.ResetOnSpawn = false
	self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	self.MainFrame = Instance.new("Frame", self.ScreenGui)
	self.MainFrame.Name = randomName()
	self.MainFrame.Size = UDim2.fromOffset(size[1], size[2])
	self.MainFrame.Position = UDim2.fromScale(0.5, 0.5)
	self.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	self.MainFrame.BackgroundColor3 = Config.Colors.Main
	self.MainFrame.ClipsDescendants = true
	Instance.new("UICorner", self.MainFrame).CornerRadius = UDim.new(0, 8)
	Instance.new("UIStroke", self.MainFrame).Color = Config.Colors.Stroke

	local titleBar = Instance.new("Frame", self.MainFrame)
	titleBar.Name = randomName()
	titleBar.Size = UDim2.new(1, 0, 0, 40)
	titleBar.BackgroundColor3 = Config.Colors.Header

	local titleLabel = Instance.new("TextLabel", titleBar)
	titleLabel.Name = randomName()
	titleLabel.Size = UDim2.new(1, -80, 1, 0)
	titleLabel.Position = UDim2.fromOffset(15, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.TextColor3 = Config.Colors.Text
	titleLabel.TextSize = 16
	titleLabel.Font = Config.Fonts.Bold
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left

	local createTitleButton = function(text, pos, callback)
		local btn = Instance.new("TextButton", titleBar)
		btn.Size = UDim2.fromOffset(30, 28)
		btn.Position = UDim2.new(1, pos, 0.5, 0)
		btn.AnchorPoint = Vector2.new(1, 0.5)
		btn.BackgroundColor3 = Config.Colors.Element
		btn.Text = text
		btn.TextColor3 = Config.Colors.Text
		btn.TextSize = 20
		btn.Font = Config.Fonts.Bold
		Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
		btn.MouseButton1Click:Connect(callback)
		return btn
	end
	
	createTitleButton("×", -10, function() self.ScreenGui:Destroy() end)
	createTitleButton("−", -45, function() self.MainFrame.Visible = not self.MainFrame.Visible end)
	
	self.TabContainer = Instance.new("ScrollingFrame", self.MainFrame)
	self.TabContainer.Name = randomName()
	self.TabContainer.Size = UDim2.new(0, 140, 1, -50)
	self.TabContainer.Position = UDim2.fromOffset(10, 40)
	self.TabContainer.BackgroundColor3 = Config.Colors.Content
	self.TabContainer.BorderSizePixel = 0
	self.TabContainer.ScrollBarThickness = 0
	Instance.new("UICorner", self.TabContainer).CornerRadius = UDim.new(0, 6)
	
	local tabLayout = Instance.new("UIListLayout", self.TabContainer)
	tabLayout.Padding = UDim.new(0, 5)
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	local tabPadding = Instance.new("UIPadding", self.TabContainer)
	tabPadding.Padding = UDim.new(0, 5)
	
	self.TabContentContainer = Instance.new("Frame", self.MainFrame)
	self.TabContentContainer.Name = randomName()
	self.TabContentContainer.Size = UDim2.new(1, -160, 1, -50)
	self.TabContentContainer.Position = UDim2.fromOffset(150, 40)
	self.TabContentContainer.BackgroundTransparency = 1
	self.TabContentContainer.ClipsDescendants = true
	
	-- Drag functionality
	local dragging, dragStart, startPos
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = self.MainFrame.Position
			input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false end end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
			self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (input.Position - dragStart).X, startPos.Y.Scale, startPos.Y.Offset + (input.Position - dragStart).Y)
		end
	end)
	
	return self
end

-- Aliases
function WindUI:Tab(options) return self:CreateTab(options) end

function WindUI:CreateTab(options)
	options = options or {}
	local name = options.Name or "Tab"
	local icon = getIcon(options.Icon)
	local locked = options.Locked or false
	
	local tabButton = Instance.new("TextButton", self.TabContainer)
	tabButton.Name = randomName()
	tabButton.Size = UDim2.new(1, 0, 0, 40)
	tabButton.BackgroundColor3 = Config.Colors.Element
	tabButton.Text = ""
	Instance.new("UICorner", tabButton).CornerRadius = UDim.new(0, 6)

	local indicator = Instance.new("Frame", tabButton)
	indicator.Name = "Indicator"
	indicator.Size = UDim2.new(0, 3, 0.8, 0)
	indicator.Position = UDim2.fromScale(0, 0.1)
	indicator.BackgroundColor3 = Config.Colors.Accent
	indicator.BorderSizePixel = 0
	indicator.Visible = false
	Instance.new("UICorner", indicator).CornerRadius = UDim.new(1, 0)
	
	if icon then
		local iconLabel = Instance.new("TextLabel", tabButton)
		iconLabel.Size = UDim2.new(0, 25, 1, 0)
		iconLabel.Position = UDim2.fromOffset(8, 0)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Text = icon
		iconLabel.TextColor3 = Config.Colors.TextDisabled
		iconLabel.TextSize = 18
		iconLabel.Font = Config.Fonts.Regular
	end
	
	local textLabel = Instance.new("TextLabel", tabButton)
	textLabel.Size = UDim2.new(1, icon and -40 or -15, 1, 0)
	textLabel.Position = UDim2.fromOffset(icon and 35 or 15, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = name
	textLabel.TextColor3 = Config.Colors.Text
	textLabel.TextSize = 14
	textLabel.Font = Config.Fonts.Medium
	textLabel.TextXAlignment = Enum.TextXAlignment.Left
	
	if locked then
		local lockIcon = Instance.new("TextLabel", tabButton)
		lockIcon.Size = UDim2.fromOffset(20, 20)
		lockIcon.Position = UDim2.new(1, -25, 0.5, 0)
		lockIcon.AnchorPoint = Vector2.new(0.5, 0.5)
		lockIcon.BackgroundTransparency = 1
		lockIcon.Text = "🔒"
		lockIcon.TextColor3 = Config.Colors.TextDisabled
		lockIcon.TextSize = 14
	end
	
	local tabContent = Instance.new("ScrollingFrame", self.TabContentContainer)
	tabContent.Name = name .. "Content"
	tabContent.Size = UDim2.fromScale(1, 1)
	tabContent.BackgroundTransparency = 1
	tabContent.ScrollBarThickness = 4
	tabContent.ScrollBarImageColor3 = Config.Colors.Accent
	tabContent.Visible = false
	
	local contentLayout = Instance.new("UIListLayout", tabContent)
	contentLayout.Padding = UDim.new(0, 10)
	contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
	local contentPadding = Instance.new("UIPadding", tabContent)
	contentPadding.PaddingTop = UDim.new(0, 10)
	
	contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 10)
	end)
	
	local tab = { Button = tabButton, Content = tabContent, Indicator = indicator, Name = name, Locked = locked }
	table.insert(self.Tabs, tab)
	
	local function selectTab()
		for _, t in pairs(self.Tabs) do
			t.Content.Visible = false
			t.Indicator.Visible = false
			t.Button.BackgroundColor3 = Config.Colors.Element
			t.Button.TextLabel.TextColor3 = Config.Colors.Text
			if t.Button:FindFirstChild("TextLabel_1") then t.Button.TextLabel_1.TextColor3 = Config.Colors.TextDisabled end -- Icon
		end
		
		tabContent.Visible = true
		indicator.Visible = true
		tabButton.BackgroundColor3 = Config.Colors.Hover
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		if tabButton:FindFirstChild("TextLabel_1") then tabButton.TextLabel_1.TextColor3 = Color3.new(1, 1, 1) end -- Icon
		self.CurrentTab = name
	end
	
	tabButton.MouseButton1Click:Connect(function()
		if locked then createPremiumPopup(self.ScreenGui) return end
		selectTab()
	end)
	
	if not self.CurrentTab and not locked then selectTab() end
	
	local tabInterface = {}
	local componentCreators = {
		Label = function(o, p) return createLabel(o, p) end,
		Button = function(o, p) return createButton(o, p, self) end,
		Toggle = function(o, p) return createToggle(o, p, self) end,
		Slider = function(o, p) return createSlider(o, p, self) end,
		Dropdown = function(o, p) return createDropdown(o, p, self) end,
	}
	
	for name, creator in pairs(componentCreators) do
		tabInterface[name] = function(_, options) return creator(options or {}, tabContent) end
		tabInterface["Create" .. name] = tabInterface[name]
	end
	
	return setmetatable({ Content = tabContent, Name = name }, { __index = tabInterface })
end

-- Component Functions
function createLabel(options, parent)
	local label = Instance.new("TextLabel", parent)
	label.Name = randomName()
	label.Size = UDim2.new(1, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.Text = options.Text or "Label"
	label.TextColor3 = Config.Colors.Text
	label.TextSize = 14
	label.Font = Config.Fonts.Medium
	label.TextXAlignment = Enum.TextXAlignment.Left
	return label
end

function createButton(options, parent, window)
	local button = Instance.new("TextButton", parent)
	button.Name = randomName()
	button.Size = UDim2.new(1, 0, 0, 35)
	button.Text = options.Name or options.Title or "Button"
	button.TextSize = 14
	button.Font = Config.Fonts.Bold
	Instance.new("UICorner", button).CornerRadius = UDim.new(0, 6)

	if options.Locked then
		button.BackgroundColor3 = Config.Colors.Disabled
		button.TextColor3 = Config.Colors.TextDisabled
		button.MouseButton1Click:Connect(function() createPremiumPopup(window.ScreenGui) end)
	else
		button.BackgroundColor3 = Config.Colors.Accent
		button.TextColor3 = Color3.new(1, 1, 1)
		if options.Callback then button.MouseButton1Click:Connect(options.Callback) end
	end
	return button
end

function createToggle(options, parent, window)
	local toggled = options.Default or false
	
	local toggleFrame = Instance.new("TextButton", parent)
	toggleFrame.Name = randomName()
	toggleFrame.Size = UDim2.new(1, 0, 0, 45)
	toggleFrame.BackgroundColor3 = Config.Colors.Element
	toggleFrame.Text = ""
	Instance.new("UICorner", toggleFrame).CornerRadius = UDim.new(0, 6)
	
	local label = Instance.new("TextLabel", toggleFrame)
	label.Size = UDim2.new(1, -70, 1, 0)
	label.Position = UDim2.fromOffset(10, 0)
	label.BackgroundTransparency = 1
	label.Text = options.Name or options.Title or "Toggle"
	label.TextColor3 = Config.Colors.Text
	label.TextSize = 14
	label.Font = Config.Fonts.Regular
	label.TextXAlignment = Enum.TextXAlignment.Left
	
	local switch = Instance.new("Frame", toggleFrame)
	switch.Size = UDim2.fromOffset(40, 22)
	switch.Position = UDim2.new(1, -10, 0.5, 0)
	switch.AnchorPoint = Vector2.new(1, 0.5)
	Instance.new("UICorner", switch).CornerRadius = UDim.new(1, 0)

	local knob = Instance.new("Frame", switch)
	knob.Size = UDim2.fromOffset(18, 18)
	knob.AnchorPoint = Vector2.new(0.5, 0.5)
	Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0)

	local function updateVisuals(isLocked)
		if isLocked then
			switch.BackgroundColor3 = Config.Colors.Disabled
			knob.BackgroundColor3 = Config.Colors.TextDisabled
			knob.Position = UDim2.fromScale(0.2, 0.5)
			label.TextColor3 = Config.Colors.TextDisabled
		else
			local switchColor = toggled and Config.Colors.Accent or Config.Colors.Stroke
			local knobPos = toggled and UDim2.fromScale(0.8, 0.5) or UDim2.fromScale(0.2, 0.5)
			TweenService:Create(switch, TweenInfo.new(0.2), { BackgroundColor3 = switchColor }):Play()
			TweenService:Create(knob, TweenInfo.new(0.2), { Position = knobPos }):Play()
			knob.BackgroundColor3 = Color3.new(1, 1, 1)
			label.TextColor3 = Config.Colors.Text
		end
	end

	toggleFrame.MouseButton1Click:Connect(function()
		if options.Locked then createPremiumPopup(window.ScreenGui) return end
		toggled = not toggled
		updateVisuals(false)
		if options.Callback then task.spawn(options.Callback, toggled) end
	end)
	
	updateVisuals(options.Locked)
	return toggleFrame
end

function createSlider(options, parent, window)
    local sliderFrame = Instance.new("Frame", parent)
    sliderFrame.Name = randomName()
    sliderFrame.Size = UDim2.new(1, 0, 0, 50)
    sliderFrame.BackgroundColor3 = Config.Colors.Element
    Instance.new("UICorner", sliderFrame).CornerRadius = UDim.new(0, 6)

    local label = Instance.new("TextLabel", sliderFrame)
    label.Size = UDim2.new(1, -70, 1, -25)
    label.Position = UDim2.fromOffset(10, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or options.Title or "Slider"
    label.TextColor3 = Config.Colors.Text
    label.Font = Config.Fonts.Regular
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left

    local valueLabel = Instance.new("TextLabel", sliderFrame)
    valueLabel.Size = UDim2.new(0, 60, 1, -25)
    valueLabel.Position = UDim2.new(1, -10, 0, 0)
    valueLabel.AnchorPoint = Vector2.new(1, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = options.Default or options.Min or 0
    valueLabel.TextColor3 = Config.Colors.Accent
    valueLabel.Font = Config.Fonts.Bold
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right

    local track = Instance.new("Frame", sliderFrame)
    track.Size = UDim2.new(1, -20, 0, 6)
    track.Position = UDim2.new(0.5, 0, 1, -15)
    track.AnchorPoint = Vector2.new(0.5, 0.5)
    track.BackgroundColor3 = Config.Colors.Stroke
    Instance.new("UICorner", track).CornerRadius = UDim.new(1, 0)

    local fill = Instance.new("Frame", track)
    fill.BackgroundColor3 = Config.Colors.Accent
    Instance.new("UICorner", fill).CornerRadius = UDim.new(1, 0)

    local knob = Instance.new("Frame", track)
    knob.Size = UDim2.fromOffset(16, 16)
    knob.AnchorPoint = Vector2.new(0.5, 0.5)
    knob.Position = UDim2.fromScale(0.5, 0.5)
    knob.BackgroundColor3 = Color3.new(1, 1, 1)
    Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0)
	Instance.new("UIStroke", knob).Color = Color3.new(0.8, 0.8, 0.8)

    local min, max, value = options.Min or 0, options.Max or 100, options.Default or (options.Min or 0)
    local dragging = false

    local function updateValue(percent)
        percent = math.clamp(percent, 0, 1)
        value = math.floor(min + (max - min) * percent + 0.5)
        valueLabel.Text = tostring(value)
        fill.Size = UDim2.new(percent, 0, 1, 0)
        knob.Position = UDim2.fromScale(percent, 0.5)
        if options.Callback then options.Callback(value) end
    end
    
    updateValue((value - min) / (max - min)) -- Set initial value

	local hitbox = Instance.new("TextButton", sliderFrame)
	hitbox.Size = UDim2.new(1, 0, 1, 0)
	hitbox.BackgroundTransparency = 1
	hitbox.Text = ""

    hitbox.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local percent = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
            updateValue(percent)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local percent = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
            updateValue(percent)
        end
    end)

    return sliderFrame
end


function createDropdown(options, parent, window)
	local dropdownFrame = Instance.new("Frame", parent)
	dropdownFrame.Name = randomName()
	dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
	dropdownFrame.BackgroundColor3 = Config.Colors.Element
	dropdownFrame.ClipsDescendants = false
	dropdownFrame.ZIndex = 100
	Instance.new("UICorner", dropdownFrame).CornerRadius = UDim.new(0, 6)

	local button = Instance.new("TextButton", dropdownFrame)
	button.Size = UDim2.fromScale(1, 1)
	button.BackgroundTransparency = 1
	button.Text = ""
	button.ZIndex = 101

	local label = Instance.new("TextLabel", button)
	label.Size = UDim2.new(1, -30, 1, 0)
	label.Position = UDim2.fromOffset(10, 0)
	label.BackgroundTransparency = 1
	label.Text = options.Name or options.Title or "Dropdown"
	label.TextColor3 = Config.Colors.Text
	label.Font = Config.Fonts.Regular
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left

	local arrow = Instance.new("TextLabel", button)
	arrow.Size = UDim2.fromOffset(20, 20)
	arrow.Position = UDim2.new(1, -15, 0.5, 0)
	arrow.AnchorPoint = Vector2.new(0.5, 0.5)
	arrow.BackgroundTransparency = 1
	arrow.Text = "▼"
	arrow.TextColor3 = Config.Colors.TextDisabled
	arrow.Font = Config.Fonts.Regular
	arrow.TextSize = 16

	local optionsList = Instance.new("ScrollingFrame", dropdownFrame)
	optionsList.Size = UDim2.new(1, 0, 0, 0)
	optionsList.Position = UDim2.new(0, 0, 1, 5)
	optionsList.BackgroundColor3 = Config.Colors.Element
	optionsList.BorderSizePixel = 0
	optionsList.Visible = false
	optionsList.ClipsDescendants = true
	optionsList.ScrollBarThickness = 4
	optionsList.ScrollBarImageColor3 = Config.Colors.Accent
	optionsList.ZIndex = 99
	Instance.new("UICorner", optionsList).CornerRadius = UDim.new(0, 6)
	Instance.new("UIListLayout", optionsList).Padding = UDim.new(0, 2)
	local listPadding = Instance.new("UIPadding", optionsList)
	listPadding.Padding = UDim.new(0, 2)

	local expanded = false
	button.MouseButton1Click:Connect(function()
		expanded = not expanded
		optionsList.Visible = true
		local targetHeight = math.min(#(options.Options or {}) * 32 + 4, 132)
		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
		TweenService:Create(arrow, tweenInfo, { Rotation = expanded and 180 or 0 }):Play()
		local sizeTween = TweenService:Create(optionsList, tweenInfo, { Size = UDim2.new(1, 0, 0, expanded and targetHeight or 0) })
		sizeTween:Play()
		if not expanded then
			sizeTween.Completed:Once(function() if not expanded then optionsList.Visible = false end end)
		end
	end)
	
	for _, opt in ipairs(options.Options or {"Option 1"}) do
		local optButton = Instance.new("TextButton", optionsList)
		optButton.Name = opt
		optButton.Size = UDim2.new(1, 0, 0, 30)
		optButton.BackgroundColor3 = Config.Colors.Element
		optButton.Text = opt
		optButton.TextColor3 = Config.Colors.Text
		optButton.TextSize = 13
		optButton.Font = Config.Fonts.Regular
		
		optButton.MouseEnter:Connect(function() optButton.BackgroundColor3 = Config.Colors.Accent end)
		optButton.MouseLeave:Connect(function() optButton.BackgroundColor3 = Config.Colors.Element end)
		
		optButton.MouseButton1Click:Connect(function()
			label.Text = opt
			if options.Callback then options.Callback(opt) end
			-- Close dropdown
			expanded = false
			local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
			TweenService:Create(arrow, tweenInfo, { Rotation = 0 }):Play()
			local sizeTween = TweenService:Create(optionsList, tweenInfo, { Size = UDim2.new(1, 0, 0, 0) })
			sizeTween:Play()
			sizeTween.Completed:Once(function() optionsList.Visible = false end)
		end)
	end

	optionsList.CanvasSize = UDim2.new(0, 0, 0, #optionsList:GetChildren() * 32)
	return dropdownFrame
end


return WindUI
