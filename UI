--[[
    WindUI v2.0 - Refactored and Improved
    Inspired by modern UI libraries for a cleaner look and better UX.
]]

local WindUI = {}
WindUI.__index = WindUI

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Icon mapping for string-based icons
local iconMap = {
	["star"] = "⭐", ["lightbulb"] = "💡", ["home"] = "🏠", ["settings"] = "⚙️",
	["user"] = "👤", ["search"] = "🔍", ["bell"] = "🔔", ["heart"] = "❤️",
	["shield"] = "🛡️", ["crown"] = "👑", ["fire"] = "🔥", ["rocket"] = "🚀",
	["trophy"] = "🏆", ["gift"] = "🎁", ["music"] = "🎵", ["camera"] = "📷",
	["book"] = "📚", ["globe"] = "🌐", ["lock"] = "🔒", ["key"] = "🔑"
}

local function getIcon(icon)
	if not icon then return nil end
	return iconMap[icon] or (icon:match("[%z\1-\127\194-\244][\128-\191]*") and #icon <= 4 and icon or nil)
end

-- Anti-detection: Generates random names for UI elements
local function randomName()
	local chars = "abcdefghijklmnopqrstuvwxyz"
	local len = math.random(10, 16)
	local str = ""
	for i = 1, len do
		str = str .. chars:sub(math.random(1, #chars), math.random(1, #chars))
	end
	return str
end

-- Premium/Locked Feature Popup
local function createPremiumPopup(screenGui, mainFrame)
	local backdrop = Instance.new("Frame")
	backdrop.Name = "PremiumPopupBackdrop"
	backdrop.Size = UDim2.new(1, 0, 1, 0)
	backdrop.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	backdrop.BackgroundTransparency = 0
	backdrop.BorderSizePixel = 0
	backdrop.ZIndex = 1000
	backdrop.Parent = screenGui

	local popup = Instance.new("Frame")
	popup.Name = "PremiumPopup"
	popup.Size = UDim2.new(0, 350, 0, 200)
	popup.Position = UDim2.fromScale(0.5, 0.5)
	popup.AnchorPoint = Vector2.new(0.5, 0.5)
	popup.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	popup.BorderSizePixel = 0
	popup.ZIndex = 1001
	popup.Parent = backdrop
	Instance.new("UICorner", popup).CornerRadius = UDim.new(0, 8)
	Instance.new("UIStroke", popup).Color = Color3.fromRGB(80, 80, 80)

	local title = Instance.new("TextLabel")
	title.Name = "PopupTitle"
	title.Size = UDim2.new(1, 0, 0, 50)
	title.BackgroundTransparency = 1
	title.Text = "Premium Feature"
	title.TextColor3 = Color3.fromRGB(255, 200, 0)
	title.TextSize = 22
	title.Font = Enum.Font.GothamBold
	title.ZIndex = 1002
	title.Parent = popup

	local lockIcon = Instance.new("TextLabel")
	lockIcon.Name = "PopupLockIcon"
	lockIcon.Size = UDim2.new(0, 40, 0, 40)
	lockIcon.Position = UDim2.fromScale(0.5, 0.4)
	lockIcon.AnchorPoint = Vector2.new(0.5, 0.5)
	lockIcon.BackgroundTransparency = 1
	lockIcon.Text = "🔒"
	lockIcon.TextSize = 36
	lockIcon.ZIndex = 1002
	lockIcon.Parent = popup

	local desc = Instance.new("TextLabel")
	desc.Name = "PopupDescription"
	desc.Size = UDim2.new(1, -40, 0, 30)
	desc.Position = UDim2.new(0.5, 0, 0, 100)
	desc.AnchorPoint = Vector2.new(0.5, 0)
	desc.BackgroundTransparency = 1
	desc.Text = "Join our Discord to get access to this feature!"
	desc.TextColor3 = Color3.fromRGB(200, 200, 200)
	desc.TextSize = 14
	desc.Font = Enum.Font.Gotham
	desc.ZIndex = 1002
	desc.Parent = popup

	local createButton = function(text, color, position, callback)
		local btn = Instance.new("TextButton")
		btn.Name = text .. "Button"
		btn.Size = UDim2.new(0.5, -15, 0, 38)
		btn.Position = position
		btn.BackgroundColor3 = color
		btn.Text = text
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.TextSize = 14
		btn.Font = Enum.Font.GothamBold
		btn.ZIndex = 1002
		btn.Parent = popup
		Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
		btn.MouseButton1Click:Connect(callback)
		return btn
	end

	local discordBtn = createButton("Copy Discord", Color3.fromRGB(88, 101, 242), UDim2.new(0, 10, 1, -48), function()
		setclipboard("https://discord.gg/cE6tjPRzjx")
		discordBtn.Text = "Copied!"
		task.delay(1.5, function() discordBtn.Text = "Copy Discord" end)
	end)

	local closeBtn = createButton("Close", Color3.fromRGB(80, 80, 80), UDim2.new(0.5, 5, 1, -48), function()
		TweenService:Create(backdrop, TweenInfo.new(0.2), { BackgroundTransparency = 1 }):Play()
		task.delay(0.2, function() backdrop:Destroy() end)
	end)

	TweenService:Create(backdrop, TweenInfo.new(0.3), { BackgroundTransparency = 0.5 }):Play()

	return backdrop
end


function WindUI:CreateWindow(options)
	local self = setmetatable({}, WindUI)
	
	options = options or {}
	local title = options.Title or "Wind UI"
	local size = options.Size or {560, 420}
	if typeof(options.Size) == "UDim2" then
		size = {options.Size.X.Offset, options.Size.Y.Offset}
	end
	
	local playerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
	
	self.ScreenGui = Instance.new("ScreenGui")
	self.ScreenGui.Name = randomName()
	self.ScreenGui.ResetOnSpawn = false
	self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	self.ScreenGui.Parent = playerGui

	self.MainFrame = Instance.new("Frame")
	self.MainFrame.Name = randomName()
	self.MainFrame.Size = UDim2.fromOffset(size[1], size[2])
	self.MainFrame.Position = UDim2.fromScale(0.5, 0.5)
	self.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
	self.MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	self.MainFrame.ClipsDescendants = true
	self.MainFrame.Visible = true
	self.MainFrame.Parent = self.ScreenGui
	Instance.new("UICorner", self.MainFrame).CornerRadius = UDim.new(0, 8)
	Instance.new("UIStroke", self.MainFrame).Color = Color3.fromRGB(60, 60, 60)

	local titleBar = Instance.new("Frame")
	titleBar.Name = randomName()
	titleBar.Size = UDim2.new(1, 0, 0, 40)
	titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	titleBar.Parent = self.MainFrame
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = randomName()
	titleLabel.Size = UDim2.new(1, -80, 1, 0)
	titleLabel.Position = UDim2.fromOffset(15, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.new(1, 1, 1)
	titleLabel.TextSize = 16
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = titleBar
	
	-- Close and Minimize buttons
	local createTitleButton = function(text, pos, callback)
		local btn = Instance.new("TextButton")
		btn.Name = randomName()
		btn.Size = UDim2.fromOffset(30, 30)
		btn.Position = UDim2.new(1, pos, 0.5, 0)
		btn.AnchorPoint = Vector2.new(1, 0.5)
		btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
		btn.Text = text
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.TextSize = 20
		btn.Font = Enum.Font.GothamBold
		btn.Parent = titleBar
		Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
		btn.MouseButton1Click:Connect(callback)
		return btn
	end
	
	local closeBtn = createTitleButton("×", -10, function() self.ScreenGui:Destroy() end)
	local minimizeBtn = createTitleButton("−", -45, function() self.MainFrame.Visible = not self.MainFrame.Visible end)
	
	-- Tab Container
	self.TabContainer = Instance.new("ScrollingFrame")
	self.TabContainer.Name = randomName()
	self.TabContainer.Size = UDim2.new(0, 130, 1, -50)
	self.TabContainer.Position = UDim2.fromOffset(10, 40)
	self.TabContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	self.TabContainer.BorderSizePixel = 0
	self.TabContainer.ScrollBarThickness = 0
	self.TabContainer.Parent = self.MainFrame
	Instance.new("UICorner", self.TabContainer).CornerRadius = UDim.new(0, 6)
	
	local tabLayout = Instance.new("UIListLayout", self.TabContainer)
	tabLayout.Padding = UDim.new(0, 5)
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	local tabPadding = Instance.new("UIPadding", self.TabContainer)
	tabPadding.Padding = UDim.new(0, 5)
	
	-- Tab Content Container
	self.TabContentContainer = Instance.new("Frame")
	self.TabContentContainer.Name = randomName()
	self.TabContentContainer.Size = UDim2.new(1, -150, 1, -50)
	self.TabContentContainer.Position = UDim2.fromOffset(140, 40)
	self.TabContentContainer.BackgroundTransparency = 1
	self.TabContentContainer.ClipsDescendants = true
	self.TabContentContainer.Parent = self.MainFrame
	
	-- Drag functionality
	local dragging, dragInput, dragStart, startPos
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = self.MainFrame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then dragging = false end
			end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
			local delta = input.Position - dragStart
			self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)

	self.Tabs = {}
	self.CurrentTab = nil
	self._mainFrame = self.MainFrame
	
	return self
end

-- Aliases
function WindUI:Tab(options) return self:CreateTab(options) end

function WindUI:CreateTab(options)
	options = options or {}
	local name = options.Name or "Tab"
	local icon = getIcon(options.Icon)
	local locked = options.Locked or false
	
	local tabButton = Instance.new("TextButton")
	tabButton.Name = randomName()
	tabButton.Size = UDim2.new(1, 0, 0, 40)
	tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	tabButton.Text = ""
	tabButton.Parent = self.TabContainer
	Instance.new("UICorner", tabButton).CornerRadius = UDim.new(0, 6)

	local indicator = Instance.new("Frame")
	indicator.Name = "Indicator"
	indicator.Size = UDim2.new(0, 3, 0.8, 0)
	indicator.Position = UDim2.fromScale(0, 0.1)
	indicator.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
	indicator.BorderSizePixel = 0
	indicator.Visible = false
	indicator.Parent = tabButton
	Instance.new("UICorner", indicator).CornerRadius = UDim.new(1, 0)
	
	local iconLabel
	if icon then
		iconLabel = Instance.new("TextLabel")
		iconLabel.Size = UDim2.new(0, 25, 1, 0)
		iconLabel.Position = UDim2.fromOffset(8, 0)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Text = icon
		iconLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
		iconLabel.TextSize = 18
		iconLabel.Font = Enum.Font.Gotham
		iconLabel.Parent = tabButton
	end
	
	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, icon and -40 or -15, 1, 0)
	textLabel.Position = UDim2.fromOffset(icon and 35 or 15, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = name
	textLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
	textLabel.TextSize = 14
	textLabel.Font = Enum.Font.GothamMedium
	textLabel.TextXAlignment = Enum.TextXAlignment.Left
	textLabel.Parent = tabButton
	
	if locked then
		local lockIcon = Instance.new("TextLabel")
		lockIcon.Size = UDim2.fromOffset(20, 20)
		lockIcon.Position = UDim2.new(1, -25, 0.5, 0)
		lockIcon.AnchorPoint = Vector2.new(0.5, 0.5)
		lockIcon.BackgroundTransparency = 1
		lockIcon.Text = "🔒"
		lockIcon.TextColor3 = Color3.fromRGB(150, 150, 150)
		lockIcon.TextSize = 14
		lockIcon.Parent = tabButton
	end
	
	local tabContent = Instance.new("ScrollingFrame")
	tabContent.Name = name .. "Content"
	tabContent.Size = UDim2.fromScale(1, 1)
	tabContent.BackgroundTransparency = 1
	tabContent.ScrollBarThickness = 4
	tabContent.Visible = false
	tabContent.Parent = self.TabContentContainer
	
	local contentLayout = Instance.new("UIListLayout", tabContent)
	contentLayout.Padding = UDim.new(0, 10)
	contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
	local contentPadding = Instance.new("UIPadding", tabContent)
	contentPadding.Padding = UDim.new(0, 10)
	
	contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y)
	end)
	
	local tab = {
		Button = tabButton,
		Content = tabContent,
		Indicator = indicator,
		Name = name,
		Locked = locked,
		Elements = { Icon = iconLabel, Text = textLabel }
	}
	table.insert(self.Tabs, tab)
	
	local function selectTab()
		for _, t in pairs(self.Tabs) do
			t.Content.Visible = false
			t.Indicator.Visible = false
			t.Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			t.Elements.Text.TextColor3 = Color3.fromRGB(220, 220, 220)
			if t.Elements.Icon then t.Elements.Icon.TextColor3 = Color3.fromRGB(200, 200, 200) end
		end
		
		tabContent.Visible = true
		indicator.Visible = true
		tabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		if iconLabel then iconLabel.TextColor3 = Color3.new(1, 1, 1) end
		self.CurrentTab = name
	end
	
	tabButton.MouseButton1Click:Connect(function()
		if locked then
			createPremiumPopup(self.ScreenGui, self._mainFrame)
			return
		end
		selectTab()
	end)
	
	if not self.CurrentTab and not locked then
		selectTab()
	end
	
	-- Return tab object with component creation methods
	local tabInterface = {}
	local componentCreators = {
		Label = createLabel,
		Button = createButton,
		Toggle = createToggle,
		Slider = createSlider,
		Dropdown = createDropdown
	}
	
	for name, creator in pairs(componentCreators) do
		tabInterface[name] = function(_, options)
			options = options or {}
			options._screenGui = self.ScreenGui
			options._mainFrame = self._mainFrame
			return creator(options, tabContent)
		end
		-- Add aliased versions (e.g., CreateLabel)
		tabInterface["Create" .. name] = tabInterface[name]
	end
	
	return setmetatable({ Content = tabContent, Name = name }, { __index = tabInterface })
end

-- Component Functions
function createLabel(options, parent)
	local label = Instance.new("TextLabel")
	label.Name = randomName()
	label.Size = UDim2.new(1, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.Text = options.Text or "Label"
	label.TextColor3 = Color3.fromRGB(200, 200, 200)
	label.TextSize = 14
	label.Font = Enum.Font.Gotham
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = parent
	return label
end

function createButton(options, parent)
	local button = Instance.new("TextButton")
	button.Name = randomName()
	button.Size = UDim2.new(1, 0, 0, 35)
	button.Text = options.Name or options.Title or "Button"
	button.TextSize = 14
	button.Font = Enum.Font.GothamBold
	button.Parent = parent
	Instance.new("UICorner", button).CornerRadius = UDim.new(0, 6)

	if options.Locked then
		button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		button.TextColor3 = Color3.fromRGB(150, 150, 150)
		button.MouseButton1Click:Connect(function()
			createPremiumPopup(options._screenGui, options._mainFrame)
		end)
	else
		button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
		button.TextColor3 = Color3.new(1, 1, 1)
		if options.Callback then
			button.MouseButton1Click:Connect(options.Callback)
		end
	end
	return button
end

function createToggle(options, parent)
	local toggled = options.Default or false
	
	local toggleFrame = Instance.new("TextButton")
	toggleFrame.Name = randomName()
	toggleFrame.Size = UDim2.new(1, 0, 0, 45)
	toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	toggleFrame.Text = ""
	toggleFrame.Parent = parent
	Instance.new("UICorner", toggleFrame).CornerRadius = UDim.new(0, 6)
	
	local label = Instance.new("TextLabel", toggleFrame)
	label.Size = UDim2.new(1, -70, 1, 0)
	label.Position = UDim2.fromOffset(10, 0)
	label.BackgroundTransparency = 1
	label.Text = options.Name or options.Title or "Toggle"
	label.TextColor3 = Color3.fromRGB(220, 220, 220)
	label.TextSize = 14
	label.Font = Enum.Font.Gotham
	label.TextXAlignment = Enum.TextXAlignment.Left
	
	local switch = Instance.new("Frame", toggleFrame)
	switch.Size = UDim2.fromOffset(40, 22)
	switch.Position = UDim2.new(1, -10, 0.5, 0)
	switch.AnchorPoint = Vector2.new(1, 0.5)
	Instance.new("UICorner", switch).CornerRadius = UDim.new(1, 0)

	local knob = Instance.new("Frame", switch)
	knob.Size = UDim2.fromOffset(18, 18)
	knob.Position = UDim2.fromScale(0.5, 0.5)
	knob.AnchorPoint = Vector2.new(0.5, 0.5)
	Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0)

	local function updateVisuals(isLocked)
		if isLocked then
			switch.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
			knob.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
			label.TextColor3 = Color3.fromRGB(150, 150, 150)
		else
			local switchColor = toggled and Color3.fromRGB(0, 120, 215) or Color3.fromRGB(80, 80, 80)
			local knobPos = toggled and UDim2.fromScale(1, 0.5) or UDim2.fromScale(0, 0.5)
			
			TweenService:Create(switch, TweenInfo.new(0.2), { BackgroundColor3 = switchColor }):Play()
			TweenService:Create(knob, TweenInfo.new(0.2), { Position = knobPos }):Play()
			knob.BackgroundColor3 = Color3.new(1, 1, 1)
			label.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end

	toggleFrame.MouseButton1Click:Connect(function()
		if options.Locked then
			createPremiumPopup(options._screenGui, options._mainFrame)
			return
		end
		toggled = not toggled
		updateVisuals(false)
		if options.Callback then
			task.spawn(options.Callback, toggled)
		end
	end)
	
	updateVisuals(options.Locked)
	return toggleFrame
end

-- Additional components like Slider and Dropdown would be refactored similarly.
-- ... (createSlider and createDropdown would be updated to match the new style)

return WindUI
