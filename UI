local WindUI = {}
WindUI.__index = WindUI

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Icon mapping for string-based icons
local iconMap = {
	["star"] = "⭐",
	["lightbulb"] = "💡",
	["home"] = "🏠",
	["settings"] = "⚙️",
	["user"] = "👤",
	["search"] = "🔍",
	["bell"] = "🔔",
	["heart"] = "❤️",
	["shield"] = "🛡️",
	["crown"] = "👑",
	["fire"] = "🔥",
	["rocket"] = "🚀",
	["trophy"] = "🏆",
	["gift"] = "🎁",
	["music"] = "🎵",
	["camera"] = "📷",
	["book"] = "📚",
	["globe"] = "🌐",
	["lock"] = "🔒",
	["key"] = "🔑"
}

-- Modified getIcon to return nil if icon doesn't exist in map
local function getIcon(icon)
	if not icon then
		return nil
	end
	if iconMap[icon] then
		return iconMap[icon]
	end
	-- Check if it's already an emoji (unicode character)
	if icon:match("[%z\1-\127\194-\244][\128-\191]*") and #icon <= 4 then
		return icon
	end
	return nil -- Return nil if not found instead of the original string
end

-- Added function to create premium popup
local function createPremiumPopup(screenGui, mainFrame)
	-- Create backdrop
	local backdrop = Instance.new("Frame")
	backdrop.Name = "PremiumPopupBackdrop"
	backdrop.Size = UDim2.new(1, 0, 1, 0)
	backdrop.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	backdrop.BackgroundTransparency = 0.5
	backdrop.BorderSizePixel = 0
	backdrop.ZIndex = 1000
	backdrop.Parent = screenGui
	
	-- Create popup frame - positioned relative to MainFrame
	local popup = Instance.new("Frame")
	popup.Name = "PremiumPopup"
	popup.Size = UDim2.new(0, 350, 0, 200)
	-- Position relative to MainFrame center instead of screen center
	local mainFrameCenter = mainFrame.AbsolutePosition + (mainFrame.AbsoluteSize / 2)
	popup.Position = UDim2.new(0, mainFrameCenter.X - 175, 0, mainFrameCenter.Y - 100)
	-- Darker popup background for black theme
	popup.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	popup.BorderSizePixel = 0
	popup.ZIndex = 1001
	popup.Parent = backdrop
	
	local popupCorner = Instance.new("UICorner")
	popupCorner.Name = "PopupCorner"
	popupCorner.CornerRadius = UDim.new(0, 12)
	popupCorner.Parent = popup
	
	-- Title
	local title = Instance.new("TextLabel")
	title.Name = "PopupTitle"
	title.Size = UDim2.new(1, -40, 0, 50)
	title.Position = UDim2.new(0, 20, 0, 20)
	title.BackgroundTransparency = 1
	title.Text = "Premium Only!"
	title.TextColor3 = Color3.fromRGB(255, 200, 0)
	title.TextSize = 24
	title.Font = Enum.Font.GothamBold
	title.TextXAlignment = Enum.TextXAlignment.Center
	title.ZIndex = 1002
	title.Parent = popup
	
	-- Lock icon
	local lockIcon = Instance.new("TextLabel")
	lockIcon.Name = "PopupLockIcon"
	lockIcon.Size = UDim2.new(0, 40, 0, 40)
	lockIcon.Position = UDim2.new(0.5, -20, 0, 75)
	lockIcon.BackgroundTransparency = 1
	lockIcon.Text = "🔒"
	lockIcon.TextSize = 32
	lockIcon.ZIndex = 1002
	lockIcon.Parent = popup
	
	-- Copy Discord Link button
	local discordBtn = Instance.new("TextButton")
	discordBtn.Name = "DiscordButton"
	discordBtn.Size = UDim2.new(0, 150, 0, 38)
	discordBtn.Position = UDim2.new(0, 20, 1, -55)
	discordBtn.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
	discordBtn.Text = "Copy Discord Link"
	discordBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
	discordBtn.TextSize = 13
	discordBtn.Font = Enum.Font.GothamBold
	discordBtn.BorderSizePixel = 0
	discordBtn.AutoButtonColor = false
	discordBtn.ZIndex = 1002
	discordBtn.Parent = popup
	
	local discordCorner = Instance.new("UICorner")
	discordCorner.Name = "DiscordCorner"
	discordCorner.CornerRadius = UDim.new(0, 8)
	discordCorner.Parent = discordBtn
	
	-- Close button
	local closeBtn = Instance.new("TextButton")
	closeBtn.Name = "CloseButton"
	closeBtn.Size = UDim2.new(0, 150, 0, 38)
	closeBtn.Position = UDim2.new(1, -170, 1, -55)
	-- Darker close button for black theme
	closeBtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	closeBtn.Text = "Close"
	closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeBtn.TextSize = 14
	closeBtn.Font = Enum.Font.GothamBold
	closeBtn.BorderSizePixel = 0
	closeBtn.AutoButtonColor = false
	closeBtn.ZIndex = 1002
	closeBtn.Parent = popup
	
	local closeCorner = Instance.new("UICorner")
	closeCorner.Name = "CloseCorner"
	closeCorner.CornerRadius = UDim.new(0, 8)
	closeCorner.Parent = closeBtn
	
	-- Button hover effects
	discordBtn.MouseEnter:Connect(function()
		discordBtn.BackgroundColor3 = Color3.fromRGB(78, 91, 232)
	end)
	
	discordBtn.MouseLeave:Connect(function()
		discordBtn.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
	end)
	
	closeBtn.MouseEnter:Connect(function()
		-- Adjusted hover color for darker theme
		closeBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
	end)
	
	closeBtn.MouseLeave:Connect(function()
		closeBtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	end)
	
	-- Copy Discord link functionality (placeholder link)
	discordBtn.MouseButton1Click:Connect(function()
		local discordLink = "https://discord.gg/cE6tjPRzjx"
		setclipboard(discordLink)
		discordBtn.Text = "Copied!"
		task.wait(1.5)
		discordBtn.Text = "Copy Discord Link"
	end)
	
	-- Close popup
	local function closePopup()
		backdrop:Destroy()
	end
	
	closeBtn.MouseButton1Click:Connect(closePopup)
	backdrop.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			closePopup()
		end
	end)
	
	return backdrop
end

-- Added random name generator for anti-detection
local function randomName()
	local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	local length = math.random(8, 12)
	local name = ""
	for i = 1, length do
		local randIndex = math.random(1, #chars)
		name = name .. chars:sub(randIndex, randIndex)
	end
	return name
end

function WindUI:CreateWindow(options)
	local self = setmetatable({}, WindUI)
	
	options = options or {}
	local title = options.Title or "Wind UI Library"
	-- Support both UDim2 and table for size
	local size
	if typeof(options.Size) == "UDim2" then
		size = {options.Size.X.Offset, options.Size.Y.Offset}
	else
		size = options.Size or {850, 500}
	end
	
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")
	
	-- Create ScreenGui
	self.ScreenGui = Instance.new("ScreenGui")
	self.ScreenGui.Name = randomName()
	self.ScreenGui.ResetOnSpawn = false
	self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	self.ScreenGui.Parent = playerGui
	
	-- Store ScreenGui reference for popup creation
	self._screenGui = self.ScreenGui

	-- Main Frame
	self.MainFrame = Instance.new("Frame")
	self.MainFrame.Name = randomName()
	self.MainFrame.Size = UDim2.new(0, size[1], 0, size[2])
	self.MainFrame.Position = UDim2.new(0.5, -size[1]/2, 0.5, -size[2]/2)
	-- Much darker main background for black theme
	self.MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
	self.MainFrame.BorderSizePixel = 0
	self.MainFrame.ClipsDescendants = false
	self.MainFrame.Active = true
	self.MainFrame.Visible = true
	self.MainFrame.Parent = self.ScreenGui
	
	local mainCorner = Instance.new("UICorner")
	mainCorner.Name = randomName()
	mainCorner.CornerRadius = UDim.new(0, 12)
	mainCorner.Parent = self.MainFrame
	
	-- Title Bar
	local titleBar = Instance.new("Frame")
	titleBar.Name = randomName()
	titleBar.Size = UDim2.new(1, 0, 0, 50)
	-- Darker title bar for black theme
	titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	titleBar.BorderSizePixel = 0
	titleBar.Active = true
	titleBar.Parent = self.MainFrame
	
	local titleCorner = Instance.new("UICorner")
	titleCorner.Name = randomName()
	titleCorner.CornerRadius = UDim.new(0, 12)
	titleCorner.Parent = titleBar
	
	local titleFix = Instance.new("Frame")
	titleFix.Name = randomName()
	titleFix.Size = UDim2.new(1, 0, 0, 12)
	titleFix.Position = UDim2.new(0, 0, 1, -12)
	titleFix.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	titleFix.BorderSizePixel = 0
	titleFix.Parent = titleBar
	
	-- Title Text
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = randomName()
	titleLabel.Size = UDim2.new(1, -150, 1, 0)
	titleLabel.Position = UDim2.new(0, 20, 0, 0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextSize = 18
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = titleBar
	
	-- Close Button
	local closeBtn = Instance.new("TextButton")
	closeBtn.Name = randomName()
	closeBtn.Size = UDim2.new(0, 38, 0, 38)
	closeBtn.Position = UDim2.new(1, -48, 0, 6)
	-- Darker button background
	closeBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	closeBtn.Text = "×"
	closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeBtn.TextSize = 24
	closeBtn.Font = Enum.Font.GothamBold
	closeBtn.BorderSizePixel = 0
	closeBtn.AutoButtonColor = false
	closeBtn.Parent = titleBar
	
	local closeCorner = Instance.new("UICorner")
	closeCorner.Name = randomName()
	closeCorner.CornerRadius = UDim.new(0, 8)
	closeCorner.Parent = closeBtn
	
	-- Minimize Button
	local minimizeBtn = Instance.new("TextButton")
	minimizeBtn.Name = randomName()
	minimizeBtn.Size = UDim2.new(0, 38, 0, 38)
	minimizeBtn.Position = UDim2.new(1, -92, 0, 6)
	-- Darker button background
	minimizeBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	minimizeBtn.Text = "−"
	minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
	minimizeBtn.TextSize = 22
	minimizeBtn.Font = Enum.Font.GothamBold
	minimizeBtn.BorderSizePixel = 0
	minimizeBtn.AutoButtonColor = false
	minimizeBtn.Parent = titleBar
	
	local minCorner = Instance.new("UICorner")
	minCorner.Name = randomName()
	minCorner.CornerRadius = UDim.new(0, 8)
	minCorner.Parent = minimizeBtn
	
	-- Floating Minimize Button
	local floatingBtn = Instance.new("TextButton")
	floatingBtn.Name = randomName()
	floatingBtn.Size = UDim2.new(0, 180, 0, 45)
	floatingBtn.Position = UDim2.new(0.5, -90, 0, 15)
	-- Darker floating button
	floatingBtn.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	floatingBtn.BackgroundTransparency = 0.2
	floatingBtn.BorderSizePixel = 0
	floatingBtn.Visible = false
	floatingBtn.Active = true
	floatingBtn.Text = ""
	floatingBtn.AutoButtonColor = false
	floatingBtn.Parent = self.ScreenGui
	
	local floatingCorner = Instance.new("UICorner")
	floatingCorner.Name = randomName()
	floatingCorner.CornerRadius = UDim.new(0, 12)
	floatingCorner.Parent = floatingBtn
	
	-- RGB Border
	local rgbBorder = Instance.new("UIStroke")
	rgbBorder.Name = randomName()
	rgbBorder.Thickness = 4
	rgbBorder.Color = Color3.fromRGB(255, 0, 0)
	rgbBorder.Transparency = 0
	rgbBorder.Parent = floatingBtn
	
	-- RGB Animation
	task.spawn(function()
		local hue = 0
		while floatingBtn and floatingBtn.Parent do
			hue = (hue + 2) % 360
			if rgbBorder then
				rgbBorder.Color = Color3.fromHSV(hue / 360, 1, 1)
			end
			task.wait(0.02)
		end
	end)
	
	local floatingLabel = Instance.new("TextLabel")
	floatingLabel.Name = randomName()
	floatingLabel.Size = UDim2.new(1, -30, 1, 0)
	floatingLabel.Position = UDim2.new(0, 15, 0, 0)
	floatingLabel.BackgroundTransparency = 1
	floatingLabel.Text = title
	floatingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	floatingLabel.TextSize = 16
	floatingLabel.Font = Enum.Font.GothamBold
	floatingLabel.TextXAlignment = Enum.TextXAlignment.Center
	floatingLabel.ZIndex = 2
	floatingLabel.Parent = floatingBtn
	
	-- Tab Container
	self.TabContainer = Instance.new("ScrollingFrame")
	self.TabContainer.Name = randomName()
	self.TabContainer.Size = UDim2.new(0, 140, 1, -60)
	self.TabContainer.Position = UDim2.new(0, 10, 0, 60)
	-- Darker tab container background
	self.TabContainer.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
	self.TabContainer.BorderSizePixel = 0
	self.TabContainer.ClipsDescendants = true
	self.TabContainer.ScrollBarThickness = 0
	self.TabContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
	self.TabContainer.ScrollingDirection = Enum.ScrollingDirection.Y
	self.TabContainer.ZIndex = 10
	self.TabContainer.Parent = self.MainFrame
	
	local tabContainerCorner = Instance.new("UICorner")
	tabContainerCorner.Name = randomName()
	tabContainerCorner.CornerRadius = UDim.new(0, 10)
	tabContainerCorner.Parent = self.TabContainer
	
	local tabLayout = Instance.new("UIListLayout")
	tabLayout.Name = randomName()
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	-- Reduced padding between tabs for tighter spacing
	tabLayout.Padding = UDim.new(0, 6)
	tabLayout.Parent = self.TabContainer
	
	local tabPadding = Instance.new("UIPadding")
	tabPadding.Name = randomName()
	tabPadding.PaddingTop = UDim.new(0, 10)
	tabPadding.PaddingBottom = UDim.new(0, 10)
	tabPadding.PaddingLeft = UDim.new(0, 10)
	tabPadding.PaddingRight = UDim.new(0, 10)
	tabPadding.Parent = self.TabContainer
	
	-- Tab Content Container
	self.TabContentContainer = Instance.new("Frame")
	self.TabContentContainer.Name = randomName()
	self.TabContentContainer.Size = UDim2.new(1, -160, 1, -70)
	self.TabContentContainer.Position = UDim2.new(0, 155, 0, 60)
	self.TabContentContainer.BackgroundTransparency = 1
	self.TabContentContainer.BorderSizePixel = 0
	self.TabContentContainer.ClipsDescendants = true
	self.TabContentContainer.ZIndex = 5
	self.TabContentContainer.Parent = self.MainFrame
	
	-- Dragging for Main Frame
	local dragging = false
	local dragInput
	local dragStart
	local startPos
	
	local function update(input)
		local delta = input.Position - dragStart
		self.MainFrame.Position = UDim2.new(
			startPos.X.Scale,
			startPos.X.Offset + delta.X,
			startPos.Y.Scale,
			startPos.Y.Offset + delta.Y
		)
	end
	
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = self.MainFrame.Position
			
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	titleBar.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
	
	-- Dragging for Floating Button
	local floatingDragging = false
	local floatingDragInput
	local floatingDragStart
	local floatingStartPos
	local floatingMouseMoved = false
	
	local function updateFloating(input)
		local delta = input.Position - floatingDragStart
		if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
			floatingMouseMoved = true
		end
		floatingBtn.Position = UDim2.new(
			floatingStartPos.X.Scale,
			floatingStartPos.X.Offset + delta.X,
			floatingStartPos.Y.Scale,
			floatingStartPos.Y.Offset + delta.Y
		)
	end
	
	floatingBtn.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			floatingDragging = true
			floatingDragStart = input.Position
			floatingStartPos = floatingBtn.Position
			floatingMouseMoved = false
			
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					floatingDragging = false
				end
			end)
		end
	end)
	
	floatingBtn.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			floatingDragInput = input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if input == floatingDragInput and floatingDragging then
			updateFloating(input)
		end
	end)
	
	-- Close Button
	closeBtn.MouseButton1Click:Connect(function()
		self.MainFrame.Visible = false
		floatingBtn.Visible = false
	end)
	
	closeBtn.MouseEnter:Connect(function()
		closeBtn.BackgroundColor3 = Color3.fromRGB(196, 43, 28)
	end)
	
	closeBtn.MouseLeave:Connect(function()
		closeBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	end)
	
	-- Minimize Button
	minimizeBtn.MouseButton1Click:Connect(function()
		self.MainFrame.Visible = false
		floatingBtn.Visible = true
	end)
	
	minimizeBtn.MouseEnter:Connect(function()
		minimizeBtn.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
	end)
	
	minimizeBtn.MouseLeave:Connect(function()
		minimizeBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	end)
	
	-- Floating Button
	floatingBtn.MouseButton1Click:Connect(function()
		if not floatingMouseMoved then
			floatingBtn.Visible = false
			self.MainFrame.Visible = true
		end
	end)
	
	floatingBtn.MouseEnter:Connect(function()
		-- Adjusted hover colors for darker theme
		floatingBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		floatingBtn.BackgroundTransparency = 0.15
	end)
	
	floatingBtn.MouseLeave:Connect(function()
		floatingBtn.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		floatingBtn.BackgroundTransparency = 0.2
	end)
	
	self.Tabs = {}
	self.CurrentTab = nil
	
	-- Store MainFrame reference for popup positioning
	self._mainFrame = self.MainFrame
	
	return self
end

-- Added Tab method as alias for CreateTab
function WindUI:Tab(options)
	return self:CreateTab(options)
end

-- Added CreateTab method to window object
function WindUI:CreateTab(options)
	options = options or {}
	local name = options.Name or options.Title or "Tab"
	-- Get icon, will be nil if not found
	local icon = getIcon(options.Icon)
	-- Added Locked parameter for locked tabs
	local locked = options.Locked or false
	
	local tabButton = Instance.new("TextButton")
	tabButton.Name = randomName()
	tabButton.Size = UDim2.new(1, 0, 0, 45)
	-- Darker tab button background
	tabButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	tabButton.Text = ""
	tabButton.BorderSizePixel = 0
	tabButton.AutoButtonColor = false
	tabButton.ZIndex = 11
	
	local corner = Instance.new("UICorner")
	corner.Name = randomName()
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = tabButton
	
	-- Only create icon label if icon exists
	local iconLabel
	if icon then
		iconLabel = Instance.new("TextLabel")
		iconLabel.Name = randomName()
		iconLabel.Size = UDim2.new(0, 25, 1, 0)
		iconLabel.Position = UDim2.new(0, 10, 0, 0)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Text = icon
		-- Reverted locked icon to normal color
		iconLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
		iconLabel.TextSize = 18
		iconLabel.Font = Enum.Font.GothamBold
		iconLabel.ZIndex = 12
		iconLabel.Parent = tabButton
	end
	
	-- Centered text alignment and adjusted sizing for better appearance
	local textLabel = Instance.new("TextLabel")
	textLabel.Name = randomName()
	if icon then
		textLabel.Size = UDim2.new(1, -45, 1, 0)
		textLabel.Position = UDim2.new(0, 40, 0, 0)
		textLabel.TextXAlignment = Enum.TextXAlignment.Left
	else
		textLabel.Size = UDim2.new(1, -20, 1, 0)
		textLabel.Position = UDim2.new(0, 10, 0, 0)
		textLabel.TextXAlignment = Enum.TextXAlignment.Center
	end
	textLabel.BackgroundTransparency = 1
	textLabel.Text = name
	-- Reverted locked text to normal color
	textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	textLabel.TextSize = 14
	textLabel.Font = Enum.Font.GothamMedium
	textLabel.TextYAlignment = Enum.TextYAlignment.Center
	textLabel.ZIndex = 12
	textLabel.Parent = tabButton
	
	-- Add lock icon for locked tabs
	if locked then
		local lockIcon = Instance.new("TextLabel")
		lockIcon.Name = randomName()
		lockIcon.Size = UDim2.new(0, 20, 0, 20)
		lockIcon.Position = UDim2.new(1, -25, 0.5, -10)
		lockIcon.BackgroundTransparency = 1
		lockIcon.Text = "🔒"
		-- Normal color for lock icon
		lockIcon.TextColor3 = Color3.fromRGB(200, 200, 200)
		lockIcon.TextSize = 14
		lockIcon.Font = Enum.Font.GothamBold
		lockIcon.ZIndex = 12
		lockIcon.Parent = tabButton
	end
	
	local tabContent = Instance.new("ScrollingFrame")
	tabContent.Name = name .. "Content"
	tabContent.Size = UDim2.new(1, 0, 1, 0)
	tabContent.Position = UDim2.new(0, 0, 0, 0)
	tabContent.BackgroundTransparency = 1
	tabContent.BorderSizePixel = 0
	tabContent.ScrollBarThickness = 0
	tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
	tabContent.ScrollingDirection = Enum.ScrollingDirection.Y
	tabContent.Visible = false
	tabContent.ZIndex = 6
	tabContent.Parent = self.TabContentContainer
	
	local tabContentLayout = Instance.new("UIListLayout")
	tabContentLayout.Name = randomName()
	tabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
	-- Reduced padding between content elements (toggles, buttons, etc.) for tighter spacing
	tabContentLayout.Padding = UDim.new(0, 8)
	tabContentLayout.Parent = tabContent
	
	tabContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContentLayout.AbsoluteContentSize.Y + 15)
	end)
	
	local tab = {
		Button = tabButton,
		Content = tabContent,
		Icon = iconLabel,
		Text = textLabel,
		Name = name,
		-- Store locked state
		Locked = locked
	}
	
	-- Tabs are stored in self.Tabs table to support multiple tabs
	self.Tabs[name] = tab
	
	-- Show premium popup when locked tab is clicked
	tabButton.MouseButton1Click:Connect(function()
		if locked then
			if self.ScreenGui and self._mainFrame then
				createPremiumPopup(self.ScreenGui, self._mainFrame)
			end
			return
		end
		
		for _, t in pairs(self.Tabs) do
			t.Button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			-- Only update icon color if icon exists
			if t.Icon then
				t.Icon.TextColor3 = Color3.fromRGB(200, 200, 200)
			end
			t.Text.TextColor3 = Color3.fromRGB(255, 255, 255)
			t.Content.Visible = false
		end
		
		tabButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
		-- Only update icon color if icon exists
		if iconLabel then
			iconLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		end
		textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		tabContent.Visible = true
		self.CurrentTab = name
	end)
	
	-- Only show hover effect if tab is not locked
	tabButton.MouseEnter:Connect(function()
		if not locked and self.CurrentTab ~= name then
			-- Adjusted hover color for darker theme
			tabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		end
	end)
	
	tabButton.MouseLeave:Connect(function()
		if not locked and self.CurrentTab ~= name then
			tabButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		end
	end)
	
	tabButton.Parent = self.TabContainer
	
	-- Auto-select first tab that is not locked
	if not self.CurrentTab and not locked then
		tabButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
		-- Only update icon color if icon exists
		if iconLabel then
			iconLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		end
		textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		tabContent.Visible = true
		self.CurrentTab = name
	end
	
	-- Return tab object with component creation methods
	return setmetatable({
		Content = tabContent,
		Name = name
	}, {__index = {
		-- Added short method names as aliases
		Label = function(_, options)
			return createLabel(options, tabContent)
		end,
		Button = function(_, options)
			-- Pass ScreenGui and MainFrame reference to button
			options._screenGui = self.ScreenGui
			options._mainFrame = self._mainFrame
			return createButton(options, tabContent)
		end,
		Toggle = function(_, options)
			-- Pass ScreenGui and MainFrame reference to toggle
			options._screenGui = self.ScreenGui
			options._mainFrame = self._mainFrame
			return createToggle(options, tabContent)
		end,
		Slider = function(_, options)
			return createSlider(options, tabContent)
		end,
		Dropdown = function(_, options)
			return createDropdown(options, tabContent)
		end,
		-- Keep original method names for compatibility
		CreateLabel = function(_, options)
			return createLabel(options, tabContent)
		end,
		CreateButton = function(_, options)
			-- Pass ScreenGui and MainFrame reference to button
			options._screenGui = self.ScreenGui
			options._mainFrame = self._mainFrame
			return createButton(options, tabContent)
		end,
		CreateToggle = function(_, options)
			-- Pass ScreenGui and MainFrame reference to toggle
			options._screenGui = self.ScreenGui
			options._mainFrame = self._mainFrame
			return createToggle(options, tabContent)
		end,
		CreateSlider = function(_, options)
			return createSlider(options, tabContent)
		end,
		CreateDropdown = function(_, options)
			return createDropdown(options, tabContent)
		end
	}})
end

-- Component creation helper functions
function createLabel(options, parent)
	options = options or {}
	local text = options.Text or "Label"
	
	local label = Instance.new("TextLabel")
	label.Name = randomName()
	label.Size = UDim2.new(1, 0, 0, 25)
	label.BackgroundTransparency = 1
	label.Text = text
	label.TextColor3 = Color3.fromRGB(180, 180, 180)
	label.TextSize = 13
	label.Font = Enum.Font.GothamBold
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.ZIndex = 2
	label.Parent = parent
	return label
end

function createButton(options, parent)
	options = options or {}
	-- Support both Name and Title parameters
	local text = options.Name or options.Title or "Button"
	local callback = options.Callback
	-- Added Locked parameter for locked buttons
	local locked = options.Locked or false
	-- Get ScreenGui and MainFrame reference for popup
	local screenGui = options._screenGui
	local mainFrame = options._mainFrame
	
	local button = Instance.new("TextButton")
	button.Name = randomName()
	button.Size = UDim2.new(0, 200, 0, 38)
	-- Different color for locked buttons - darker for black theme
	button.BackgroundColor3 = locked and Color3.fromRGB(35, 35, 35) or Color3.fromRGB(0, 120, 215)
	button.Text = text
	-- Dimmed text for locked buttons
	button.TextColor3 = locked and Color3.fromRGB(120, 120, 120) or Color3.fromRGB(255, 255, 255)
	button.TextSize = 15
	button.Font = Enum.Font.GothamMedium
	button.BorderSizePixel = 0
	button.AutoButtonColor = false
	button.ZIndex = 2
	button.Parent = parent
	
	local corner = Instance.new("UICorner")
	corner.Name = randomName()
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = button
	
	-- Add lock icon for locked buttons
	if locked then
		local lockIcon = Instance.new("TextLabel")
		lockIcon.Name = randomName()
		lockIcon.Size = UDim2.new(0, 20, 0, 20)
		-- Moved lock icon to the right side
		lockIcon.Position = UDim2.new(1, -30, 0.5, -10)
		lockIcon.BackgroundTransparency = 1
		lockIcon.Text = "🔒"
		lockIcon.TextColor3 = Color3.fromRGB(120, 120, 120)
		lockIcon.TextSize = 14
		lockIcon.Font = Enum.Font.Gotham
		lockIcon.ZIndex = 3
		lockIcon.Parent = button
	end
	
	-- Show premium popup when locked button is clicked
	if locked then
		button.MouseButton1Click:Connect(function()
			if screenGui and mainFrame then
				createPremiumPopup(screenGui, mainFrame)
			end
		end)
	else
		-- Only add hover/click effects if button is not locked
		button.MouseEnter:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(0, 100, 190)
		end)
		
		button.MouseLeave:Connect(function()
			button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
		end)
		
		button.MouseButton1Down:Connect(function()
			TweenService:Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 190, 0, 36)
			}):Play()
		end)
		
		button.MouseButton1Up:Connect(function()
			TweenService:Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 200, 0, 38)
			}):Play()
		end)
		
		if callback then
			button.MouseButton1Click:Connect(callback)
		end
	end
	
	return button
end

function createToggle(options, parent)
	options = options or {}
	-- Support both Name and Title parameters
	local text = options.Name or options.Title or "Toggle"
	local default = options.Default or false
	local callback = options.Callback
	-- Added Locked parameter for locked toggles
	local locked = options.Locked or false
	-- Get ScreenGui reference for popup
	local screenGui = options._screenGui
	-- Get MainFrame reference for popup positioning
	local mainFrame = options._mainFrame
	
	local toggleFrame = Instance.new("Frame")
	toggleFrame.Name = randomName()
	-- Reduced toggle height from 40 to 38 for more compact appearance
	toggleFrame.Size = UDim2.new(1, 0, 0, 38)
	-- Darker toggle background for black theme
	toggleFrame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
	toggleFrame.BorderSizePixel = 0
	toggleFrame.ZIndex = 2
	toggleFrame.Parent = parent
	
	local frameCorner = Instance.new("UICorner")
	frameCorner.Name = randomName()
	frameCorner.CornerRadius = UDim.new(0, 8)
	frameCorner.Parent = toggleFrame
	
	local clickDetector = Instance.new("TextButton")
	clickDetector.Name = randomName()
	clickDetector.Size = UDim2.new(1, 0, 1, 0)
	clickDetector.BackgroundTransparency = 1
	clickDetector.Text = ""
	clickDetector.ZIndex = 3
	clickDetector.Parent = toggleFrame
	
	local label = Instance.new("TextLabel")
	label.Name = randomName()
	-- Adjust label size to make room for lock icon
	label.Size = locked and UDim2.new(1, -95, 1, 0) or UDim2.new(1, -70, 1, 0)
	label.Position = UDim2.new(0, 15, 0, 0)
	label.BackgroundTransparency = 1
	label.Text = text
	-- Reverted to normal text color for locked toggles
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextSize = 15
	label.Font = Enum.Font.Gotham
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.ZIndex = 3
	label.Parent = toggleFrame
	
	-- Add lock icon for locked toggles (removed overlay)
	if locked then
		local lockIcon = Instance.new("TextLabel")
		lockIcon.Name = randomName()
		lockIcon.Size = UDim2.new(0, 20, 0, 20)
		lockIcon.Position = UDim2.new(1, -85, 0.5, -10)
		lockIcon.BackgroundTransparency = 1
		lockIcon.Text = "🔒"
		-- Normal color for lock icon
		lockIcon.TextColor3 = Color3.fromRGB(200, 200, 200)
		lockIcon.TextSize = 14
		lockIcon.Font = Enum.Font.GothamBold
		lockIcon.ZIndex = 3
		lockIcon.Parent = toggleFrame
	end
	
	local toggleButton = Instance.new("Frame")
	toggleButton.Name = randomName()
	toggleButton.Size = UDim2.new(0, 50, 0, 24)
	toggleButton.Position = UDim2.new(1, -60, 0.5, -12)
	-- Darker toggle button background
	toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	toggleButton.BorderSizePixel = 0
	toggleButton.ZIndex = 3
	toggleButton.Parent = toggleFrame
	
	local toggleCorner = Instance.new("UICorner")
	toggleCorner.Name = randomName()
	toggleCorner.CornerRadius = UDim.new(1, 0)
	toggleCorner.Parent = toggleButton
	
	local toggleCircle = Instance.new("Frame")
	toggleCircle.Name = randomName()
	toggleCircle.Size = UDim2.new(0, 20, 0, 20)
	toggleCircle.Position = UDim2.new(0, 2, 0.5, -10)
	-- Reverted to normal circle color for locked toggles
	toggleCircle.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
	toggleCircle.BorderSizePixel = 0
	toggleCircle.ZIndex = 4
	toggleCircle.Parent = toggleButton
	
	local circleCorner = Instance.new("UICorner")
	circleCorner.Name = randomName()
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = toggleCircle
	
	local toggled = default
	
	local function updateToggle(animate)
		local tweenInfo = TweenInfo.new(animate and 0.2 or 0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		
		if toggled then
			-- Normal color for toggle when on
			TweenService:Create(toggleButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(0, 120, 215)}):Play()
			TweenService:Create(toggleCircle, tweenInfo, {Position = UDim2.new(1, -22, 0.5, -10)}):Play()
		else
			-- Darker off state for toggle
			TweenService:Create(toggleButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(35, 35, 35)}):Play()
			TweenService:Create(toggleCircle, tweenInfo, {Position = UDim2.new(0, 2, 0.5, -10)}):Play()
		end
		
		if callback then
			callback(toggled)
		end
	end
	
	-- Show premium popup when locked toggle is clicked, pass MainFrame
	clickDetector.MouseButton1Click:Connect(function()
		if locked then
			if screenGui and mainFrame then
				createPremiumPopup(screenGui, mainFrame)
			end
			return
		end
		toggled = not toggled
		updateToggle(true)
	end)
	
	updateToggle(false)
	
	return toggleFrame
end

function createSlider(options, parent)
	options = options or {}
	local text = options.Name or options.Title or "Slider"
	local min = options.Min or 0
	local max = options.Max or 100
	local default = options.Default or 50
	local callback = options.Callback
	
	local sliderFrame = Instance.new("Frame")
	sliderFrame.Name = randomName()
	sliderFrame.Size = UDim2.new(1, 0, 0, 55)
	-- Darker slider frame background
	sliderFrame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
	sliderFrame.BorderSizePixel = 0
	sliderFrame.ZIndex = 2
	sliderFrame.Parent = parent
	
	local frameCorner = Instance.new("UICorner")
	frameCorner.Name = randomName()
	frameCorner.CornerRadius = UDim.new(0, 8)
	frameCorner.Parent = sliderFrame
	
	local label = Instance.new("TextLabel")
	label.Name = randomName()
	label.Size = UDim2.new(1, -60, 0, 20)
	label.Position = UDim2.new(0, 15, 0, 8)
	label.BackgroundTransparency = 1
	label.Text = text
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextSize = 15
	label.Font = Enum.Font.Gotham
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.ZIndex = 3
	label.Parent = sliderFrame
	
	local valueLabel = Instance.new("TextLabel")
	valueLabel.Name = randomName()
	valueLabel.Size = UDim2.new(0, 50, 0, 20)
	valueLabel.Position = UDim2.new(1, -60, 0, 8)
	valueLabel.BackgroundTransparency = 1
	valueLabel.Text = tostring(default)
	valueLabel.TextColor3 = Color3.fromRGB(0, 120, 215)
	valueLabel.TextSize = 15
	valueLabel.Font = Enum.Font.GothamBold
	valueLabel.TextXAlignment = Enum.TextXAlignment.Right
	valueLabel.ZIndex = 3
	valueLabel.Parent = sliderFrame
	
	local sliderHitbox = Instance.new("Frame")
	sliderHitbox.Name = randomName()
	sliderHitbox.Size = UDim2.new(1, -30, 0, 30)
	sliderHitbox.Position = UDim2.new(0, 15, 1, -33)
	sliderHitbox.BackgroundTransparency = 1
	sliderHitbox.ZIndex = 3
	sliderHitbox.Parent = sliderFrame
	
	local sliderTrack = Instance.new("Frame")
	sliderTrack.Name = randomName()
	sliderTrack.Size = UDim2.new(1, 0, 0, 6)
	sliderTrack.Position = UDim2.new(0, 0, 0.5, -3)
	-- Darker slider track
	sliderTrack.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	sliderTrack.BorderSizePixel = 0
	sliderTrack.ZIndex = 3
	sliderTrack.Parent = sliderHitbox
	
	local trackCorner = Instance.new("UICorner")
	trackCorner.Name = randomName()
	trackCorner.CornerRadius = UDim.new(1, 0)
	trackCorner.Parent = sliderTrack
	
	local sliderFill = Instance.new("Frame")
	sliderFill.Name = randomName()
	sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
	sliderFill.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
	sliderFill.BorderSizePixel = 0
	sliderFill.ZIndex = 3
	sliderFill.Parent = sliderTrack
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.Name = randomName()
	fillCorner.CornerRadius = UDim.new(1, 0)
	fillCorner.Parent = sliderFill
	
	local sliderButton = Instance.new("TextButton")
	sliderButton.Name = randomName()
	sliderButton.Size = UDim2.new(0, 16, 0, 16)
	sliderButton.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
	sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	sliderButton.Text = ""
	sliderButton.BorderSizePixel = 0
	sliderButton.AutoButtonColor = false
	sliderButton.ZIndex = 4
	sliderButton.Parent = sliderTrack
	
	local buttonCorner = Instance.new("UICorner")
	buttonCorner.Name = randomName()
	buttonCorner.CornerRadius = UDim.new(1, 0)
	buttonCorner.Parent = sliderButton
	
	local currentValue = default
	local sliding = false
	
	local function updateSlider(input)
		local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
		currentValue = math.floor(min + (max - min) * relativeX)
		
		valueLabel.Text = tostring(currentValue)
		sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
		sliderButton.Position = UDim2.new(relativeX, -8, 0.5, -8)
		
		if callback then
			callback(currentValue)
		end
	end
	
	sliderButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			sliding = true
		end
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if sliding then
				sliding = false
			end
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if sliding and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			updateSlider(input)
		end
	end)
	
	sliderHitbox.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			sliding = true
			updateSlider(input)
		end
	end)
	
	return sliderFrame
end

function createDropdown(options, parent)
	options = options or {}
	-- Support both Name and Title parameters
	local text = options.Name or options.Title or "Dropdown"
	local dropdownOptions = options.Options or {"Option 1", "Option 2"}
	local callback = options.Callback
	
	local dropdownFrame = Instance.new("Frame")
	dropdownFrame.Name = randomName()
	dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
	-- Darker dropdown background
	dropdownFrame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
	dropdownFrame.BorderSizePixel = 0
	dropdownFrame.ClipsDescendants = false
	dropdownFrame.ZIndex = 200
	dropdownFrame.Parent = parent
	
	local frameCorner = Instance.new("UICorner")
	frameCorner.Name = randomName()
	frameCorner.CornerRadius = UDim.new(0, 8)
	frameCorner.Parent = dropdownFrame
	
	local dropdownButton = Instance.new("TextButton")
	dropdownButton.Name = randomName()
	dropdownButton.Size = UDim2.new(1, 0, 0, 40)
	dropdownButton.BackgroundTransparency = 1
	dropdownButton.Text = ""
	dropdownButton.ZIndex = 201
	dropdownButton.Parent = dropdownFrame
	
	local label = Instance.new("TextLabel")
	label.Name = randomName()
	label.Size = UDim2.new(1, -40, 1, 0)
	label.Position = UDim2.new(0, 15, 0, 0)
	label.BackgroundTransparency = 1
	label.Text = text
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextSize = 15
	label.Font = Enum.Font.Gotham
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.ZIndex = 201
	label.Parent = dropdownFrame
	
	local arrow = Instance.new("TextLabel")
	arrow.Name = randomName()
	arrow.Size = UDim2.new(0, 30, 1, 0)
	arrow.Position = UDim2.new(1, -35, 0, 0)
	arrow.BackgroundTransparency = 1
	arrow.Text = "▼"
	arrow.TextColor3 = Color3.fromRGB(200, 200, 200)
	arrow.TextSize = 14
	arrow.Font = Enum.Font.Gotham
	arrow.ZIndex = 201
	arrow.Parent = dropdownFrame
	
	local optionsFrame = Instance.new("ScrollingFrame")
	optionsFrame.Name = randomName()
	optionsFrame.Size = UDim2.new(1, 0, 0, 0)
	optionsFrame.Position = UDim2.new(0, 0, 1, 5)
	-- Darker options frame background
	optionsFrame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
	optionsFrame.BorderSizePixel = 0
	optionsFrame.Visible = false
	optionsFrame.ClipsDescendants = true
	optionsFrame.ScrollBarThickness = 4
	optionsFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 120, 215)
	optionsFrame.ZIndex = 300
	optionsFrame.ScrollingEnabled = true
	optionsFrame.Parent = dropdownFrame
	
	local optionsCorner = Instance.new("UICorner")
	optionsCorner.Name = randomName()
	optionsCorner.CornerRadius = UDim.new(0, 8)
	optionsCorner.Parent = optionsFrame
	
	local optionsLayout = Instance.new("UIListLayout")
	optionsLayout.Name = randomName()
	optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	optionsLayout.Parent = optionsFrame
	
	local expanded = false
	-- Store original canvas size to restore after dropdown closes
	local originalCanvasSize = parent.CanvasSize
	
	dropdownButton.MouseButton1Click:Connect(function()
		expanded = not expanded
		
		if expanded then
			optionsFrame.Visible = true
			local targetHeight = math.min(#dropdownOptions * 35, 157)
			
			-- Calculate extra space needed for dropdown and extend canvas size
			local dropdownAbsolutePos = dropdownFrame.AbsolutePosition.Y + dropdownFrame.AbsoluteSize.Y
			local parentAbsoluteBottom = parent.AbsolutePosition.Y + parent.AbsoluteSize.Y
			local extraSpaceNeeded = math.max(0, (dropdownAbsolutePos + targetHeight + 5) - parentAbsoluteBottom)
			
			if extraSpaceNeeded > 0 then
				parent.CanvasSize = UDim2.new(0, 0, 0, parent.CanvasSize.Y.Offset + extraSpaceNeeded + 20)
			end
			
			local tween = TweenService:Create(optionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
				Size = UDim2.new(1, 0, 0, targetHeight)
			})
			tween:Play()
			arrow.Text = "▲"
		else
			-- Restore original canvas size when dropdown closes
			local layout = parent:FindFirstChildOfClass("UIListLayout")
			if layout then
				parent.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 15)
			end
			
			local tween = TweenService:Create(optionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
				Size = UDim2.new(1, 0, 0, 0)
			})
			tween:Play()
			tween.Completed:Connect(function()
				optionsFrame.Visible = false
			end)
			arrow.Text = "▼"
		end
	end)
	
	for _, option in ipairs(dropdownOptions) do
		local optionButton = Instance.new("TextButton")
		optionButton.Name = randomName()
		optionButton.Size = UDim2.new(1, 0, 0, 35)
		-- Darker option button background
		optionButton.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
		optionButton.Text = option
		optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		optionButton.TextSize = 14
		optionButton.Font = Enum.Font.Gotham
		optionButton.BorderSizePixel = 0
		optionButton.AutoButtonColor = false
		optionButton.ZIndex = 301
		optionButton.Parent = optionsFrame
		
		optionButton.MouseEnter:Connect(function()
			optionButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
		end)
		
		optionButton.MouseLeave:Connect(function()
			optionButton.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
		end)
		
		optionButton.MouseButton1Click:Connect(function()
			label.Text = option
			expanded = false
			
			-- Restore canvas size when option is selected
			local layout = parent:FindFirstChildOfClass("UIListLayout")
			if layout then
				parent.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 15)
			end
			
			local tween = TweenService:Create(optionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
				Size = UDim2.new(1, 0, 0, 0)
			})
			tween:Play()
			tween.Completed:Connect(function()
				optionsFrame.Visible = false
			end)
			arrow.Text = "▼"
			
			if callback then
				callback(option)
			end
		end)
	end
	
	optionsFrame.CanvasSize = UDim2.new(0, 0, 0, #dropdownOptions * 35)
	
	return dropdownFrame
end

-- Return library table for loadstring usage
return WindUI
</merged_code
